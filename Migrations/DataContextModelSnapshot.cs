// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vszk.Data;

#nullable disable

namespace vszk.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("vszk.Models.CatFuncConnect", b =>
                {
                    b.Property<int>("CfConnectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CfConnectID"));

                    b.Property<int>("CategoryCatID")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalityFuncID")
                        .HasColumnType("int");

                    b.HasKey("CfConnectID");

                    b.HasIndex("CategoryCatID");

                    b.HasIndex("FunctionalityFuncID");

                    b.ToTable("CatFuncConnect");
                });

            modelBuilder.Entity("vszk.Models.Category", b =>
                {
                    b.Property<int>("CatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatID"));

                    b.Property<int>("CategoryGroupCatgroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatID");

                    b.HasIndex("CategoryGroupCatgroupID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("vszk.Models.CategoryGroup", b =>
                {
                    b.Property<int>("CatgroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatgroupID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatgroupID");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("vszk.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyID"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("vszk.Models.Compatibility", b =>
                {
                    b.Property<int>("compID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("compID"));

                    b.Property<string>("device")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("compID");

                    b.ToTable("Compatibility");
                });

            modelBuilder.Entity("vszk.Models.Functionality", b =>
                {
                    b.Property<int>("FuncID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuncID"));

                    b.Property<string>("Function")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuncID");

                    b.ToTable("Functionality");
                });

            modelBuilder.Entity("vszk.Models.Language", b =>
                {
                    b.Property<int>("langID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("langID"));

                    b.Property<string>("Lang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("langID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("vszk.Models.Level", b =>
                {
                    b.Property<int>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelID"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelID");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("vszk.Models.Modul", b =>
                {
                    b.Property<int>("ModulID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModulID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModulID");

                    b.ToTable("Modul");
                });

            modelBuilder.Entity("vszk.Models.OS", b =>
                {
                    b.Property<int>("OsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OsID"));

                    b.Property<string>("Os")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OsID");

                    b.ToTable("OS");
                });

            modelBuilder.Entity("vszk.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<DateTime>("Datumido")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoftwareID")
                        .HasColumnType("int");

                    b.Property<int>("StarID")
                        .HasColumnType("int");

                    b.Property<int>("TextratingID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("SoftwareID");

                    b.HasIndex("StarID");

                    b.HasIndex("TextratingID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("vszk.Models.Remuneration", b =>
                {
                    b.Property<int>("RemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RemID"));

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<int>("Monthly_price")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("RemID");

                    b.HasIndex("LevelID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("Remuneration");
                });

            modelBuilder.Entity("vszk.Models.Software", b =>
                {
                    b.Property<int>("SoftwareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareID"));

                    b.Property<int>("CategoryCatID")
                        .HasColumnType("int");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Introduction_fee")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SoftwareID");

                    b.HasIndex("CategoryCatID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Software");
                });

            modelBuilder.Entity("vszk.Models.SoftwareCompConnect", b =>
                {
                    b.Property<int>("ScconnectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScconnectID"));

                    b.Property<int?>("CompatibilitycompID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("ScconnectID");

                    b.HasIndex("CompatibilitycompID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareCompConnect");
                });

            modelBuilder.Entity("vszk.Models.SoftwareFunction", b =>
                {
                    b.Property<int>("SoftwarefuncID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwarefuncID"));

                    b.Property<int>("FunctionalityFuncID")
                        .HasColumnType("int");

                    b.Property<bool>("Sfunction")
                        .HasColumnType("bit");

                    b.Property<int>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("SoftwarefuncID");

                    b.HasIndex("FunctionalityFuncID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareFunction");
                });

            modelBuilder.Entity("vszk.Models.SoftwareLangConnect", b =>
                {
                    b.Property<int>("SlconnectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlconnectID"));

                    b.Property<int?>("LanguagelangID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("SlconnectID");

                    b.HasIndex("LanguagelangID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareLangConnect");
                });

            modelBuilder.Entity("vszk.Models.SoftwareModulConnect", b =>
                {
                    b.Property<int>("SmconnectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmconnectID"));

                    b.Property<int>("ModulID")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("SmconnectID");

                    b.HasIndex("ModulID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareModulConnect");
                });

            modelBuilder.Entity("vszk.Models.SoftwareOSConnect", b =>
                {
                    b.Property<int>("SoconnectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoconnectID"));

                    b.Property<int?>("OsID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("SoconnectID");

                    b.HasIndex("OsID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("SoftwareOSConnect");
                });

            modelBuilder.Entity("vszk.Models.Star", b =>
                {
                    b.Property<int>("StarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StarID"));

                    b.Property<float>("All")
                        .HasColumnType("real");

                    b.Property<float>("Characteristic")
                        .HasColumnType("real");

                    b.Property<float>("Price_value")
                        .HasColumnType("real");

                    b.Property<float>("Service")
                        .HasColumnType("real");

                    b.Property<float>("Simplicity")
                        .HasColumnType("real");

                    b.Property<int>("recommendation")
                        .HasColumnType("int");

                    b.HasKey("StarID");

                    b.ToTable("Star");
                });

            modelBuilder.Entity("vszk.Models.Support", b =>
                {
                    b.Property<int>("supportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supportID"));

                    b.Property<int?>("LanguagelangID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("supportID");

                    b.HasIndex("LanguagelangID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("Support");
                });

            modelBuilder.Entity("vszk.Models.TextRating", b =>
                {
                    b.Property<int>("TextratingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TextratingID"));

                    b.Property<string>("All")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration_of_use")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Negative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Positive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason_of_use")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextratingID");

                    b.ToTable("TextRating");
                });

            modelBuilder.Entity("vszk.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Encrypted_password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Settlement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("vszk.Models.CatFuncConnect", b =>
                {
                    b.HasOne("vszk.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Functionality", "Functionality")
                        .WithMany()
                        .HasForeignKey("FunctionalityFuncID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Functionality");
                });

            modelBuilder.Entity("vszk.Models.Category", b =>
                {
                    b.HasOne("vszk.Models.CategoryGroup", "CategoryGroup")
                        .WithMany()
                        .HasForeignKey("CategoryGroupCatgroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("vszk.Models.Rating", b =>
                {
                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Star", "Star")
                        .WithMany()
                        .HasForeignKey("StarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.TextRating", "TextRating")
                        .WithMany()
                        .HasForeignKey("TextratingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Software");

                    b.Navigation("Star");

                    b.Navigation("TextRating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vszk.Models.Remuneration", b =>
                {
                    b.HasOne("vszk.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.Software", b =>
                {
                    b.HasOne("vszk.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("vszk.Models.SoftwareCompConnect", b =>
                {
                    b.HasOne("vszk.Models.Compatibility", "Compatibility")
                        .WithMany()
                        .HasForeignKey("CompatibilitycompID");

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID");

                    b.Navigation("Compatibility");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.SoftwareFunction", b =>
                {
                    b.HasOne("vszk.Models.Functionality", "Functionality")
                        .WithMany()
                        .HasForeignKey("FunctionalityFuncID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Functionality");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.SoftwareLangConnect", b =>
                {
                    b.HasOne("vszk.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguagelangID");

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID");

                    b.Navigation("Language");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.SoftwareModulConnect", b =>
                {
                    b.HasOne("vszk.Models.Modul", "Modul")
                        .WithMany()
                        .HasForeignKey("ModulID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modul");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.SoftwareOSConnect", b =>
                {
                    b.HasOne("vszk.Models.OS", "OS")
                        .WithMany()
                        .HasForeignKey("OsID");

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID");

                    b.Navigation("OS");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("vszk.Models.Support", b =>
                {
                    b.HasOne("vszk.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguagelangID");

                    b.HasOne("vszk.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID");

                    b.Navigation("Language");

                    b.Navigation("Software");
                });
#pragma warning restore 612, 618
        }
    }
}
